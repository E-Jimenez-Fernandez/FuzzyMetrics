% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculoFactoresPonderacion.R
\name{calculoFactoresPonderacion}
\alias{calculoFactoresPonderacion}
\title{Compute weights through MARS and variable importance}
\usage{
calculoFactoresPonderacion(x, Compind, degrees, nfold = 5, trace = 0.5)
}
\arguments{
\item{x}{A normalized data frame where rows represent observations and columns represent indicators.}

\item{Compind}{A numeric vector representing the composite indicators for the observations.}

\item{degrees}{An integer specifying the degree of interactions to consider in the MARS model.}

\item{nfold}{Number of folds for cross-validation (default is 5).}

\item{trace}{Amount of information displayed during model fitting (default is 0.5).}
}
\value{
A list containing:
\item{res.ord}{A numeric vector representing the weights for each variable.}
\item{colnames(dat_os)}{A character vector with the names of the variables.}
}
\description{
This function calculates the weights of variables using the MARS (Multivariate Adaptive Regression Splines) model and evaluates variable importance based on the model's residual sum of squares (RSS).
The function is useful for determining the relative importance of different variables in explaining a composite indicator.
}
\examples{
# Generate a dataset with more rows (observations) and columns (variables)
set.seed(123)
normalized_data <- data.frame(
  GDP = runif(100, 0, 1),
  Unemployment = runif(100, 0, 1),
  Literacy = runif(100, 0, 1),
  Education = runif(100, 0, 1),
  Healthcare = runif(100, 0, 1),
  Inflation = runif(100, 0, 1),
  Exports = runif(100, 0, 1),
  Imports = runif(100, 0, 1)
)

# Create a vector of composite indicators (e.g. the average of the above variables)
comp_ind <- rowMeans(normalized_data)

# Specify the degree of interactions for the MARS model
degrees <- 2  # Allow up to second-degree interactions between variables

# Execute the function calculoFactoresPonderacion with the generated data
result <- calculoFactoresPonderacion(normalized_data, comp_ind, degrees)

# Print the weights of the variables
print(result[[1]])  # Calculated weights for each variable
print(result[[2]])  # Names of the variables
}
